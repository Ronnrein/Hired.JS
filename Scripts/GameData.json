{
  "workers": [
    { "id": 0, "name": "Hired.JS", "position": "AI" },
    { "id": 1, "name": "Paul Cleverley", "position": "Senior developer" },
    { "id": 2, "name": "Sandra Cowie", "position": "Developer" },
    { "id": 3, "name": "Nkondo Adui", "position": "Developer" },
    { "id": 4, "name": "Maja DÃ¼rr", "position": "Intern" },
    { "id": 5, "name": "Phil Andrews", "position": "CEO" }
  ],
  "documentations": [{
    "title": "Variables",
    "text": "Variables are ways to store values. Variables can be declared and assigned by writing|var varName = \"Hello World\";|",
    "url": "https://www.w3schools.com/js/js_variables.asp"
  },{
    "title": "Functions",
    "text": "Functions (Also called subroutines or procedures) are bodies of code that receive one or more inputs, perform a specific task, and can optionally return a value. A function is defined by writing|function name(param1, param2) {|where param1 and param2 are variables you can use in your functions",
    "url": "https://www.w3schools.com/js/js_functions.asp"
  },{
    "title": "console.log",
    "text": "console.log is a function that is heavily used in JavaScript development to debug and get more feedback of your running code. For instance, writing |console.log(\"Hello world!\");| will print Hello World in the console.",
    "url": "https://developer.mozilla.org/en-US/docs/Web/API/Console/log"
  },{
    "title": "String operations",
    "text": "While in mathematics adding things together using a + operator will work the same in JavaScript with numbers, using a + operator with strings will in JavaScript add the second string at the end of the first string. For example, |var result = \"Hello\" + \"World\";| will give result the value of HelloWorld",
    "url": "https://www.w3schools.com/js/js_operators.asp"
  },{
    "title": "Types",
    "text": "A variable can have many different types. Examples of types it can have are number, string, object, array, among others. JavaScript has a built-in operator to get the type of any variable. For instance, if you type |var type = typeof 2;|, type will not have a string value of Number",
    "url": "https://www.w3schools.com/js/js_datatypes.asp"
  },{
    "title": "Operators",
    "text": "To do math in JavaScript, you simply need to use the desired math operator combined with one or more number variable. For example, if you wish to multiply to numbers, you can do |var result = 2 * 4;|. If you have variables containing the numbers, you can do |var result = num1 / num2;|",
    "url": "https://www.w3schools.com/js/js_operators.asp"
  },{
    "title": "Order of operations",
    "text": "Just as in math, math operations resolve in a particular order. For instance, if you write |2 * 5 + 2|, it will first do the multiplication, then do the addition. To work around this, you can surround the operation you wish to do first with parantheses. For instance, if you wished to do the addition first in the previous example, you could do |2 * (5 + 2)|",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence"
  },{
    "title": "Objects",
    "text": "Objects are variables that can contain many values and methods. You may think of it in the same way as real-life objects. A phone is an object with many properties and methods. For instance, you could say a phone has a certain screen property, colour property, as well as a certain power-on method. Most phones share these properties and methods, yet they may differ from phone to phone. The same is true for objects in JavaScript",
    "url": "https://www.w3schools.com/js/js_objects.asp"
  },{
    "title": "Object properties",
    "text": "To access the properties of an object you use a period. For instance, |var screen = phone.screen;| would get the screen property of the phone object. To create an object with properties you can write |var phone = { screen: \"HD\", colour: \"red\" };|. Now if you would do |console.log(phone.colour);| the console would print \"red\"",
    "url": "https://www.w3schools.com/js/js_properties.asp"
  },{
    "title": "Libraries",
    "text": "Libraries are collections of functionality for specific purposes. For instance, JavaScript contains a Math library with a myriad of functions and constants to help with mathematical operations.",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects"
  },{
    "title": "Math library",
    "text": "The Math library in JavaScript can be used for anything from retrieving the value of PI to generating random numbers or rounding numbers. As the Math library is already included with JavaScript, to call a function is simple. For instance, |var rand = Math.random();| will assign rand a number between 0 and 1. If you wish to round a number to the lowest integer you could call |var num = Math.floor(2.8);|. This would make num be 2",
    "url": "https://www.w3schools.com/js/js_math.asp"
  },{
    "title": "Arrays",
    "text": "Arrays are lists that store several variables in one variable. Creating an array can be accomplished in several ways. If you wish to create an array containing variables that you have, you could write |var arr = new Array(var1, var2);|If you wish to create an empty array with a specified size of for instance 10 you can write |var arr = new Array(10);|To access an element of an array you can write |var element = arr[2];|Here you are accessing the third element of the array (counting starts at 0). You can check how many elements an array has like so|var len = arr.length;|Arrays also have functions, such as a function to add an element to the array:|arr.push(newElement);|",
    "url": "https://www.w3schools.com/js/js_arrays.asp"
  },{
    "title": "Loops",
    "text": "To work with arrays, one is often required to use loops. The most important one to know is the for-loop. This repeats a set of operations as many times as specified. For instance, here:|for(var i = 0; i < 10; i++) {|We tell the for loop to create the variable i, set it to 0, repeat the following code as long as the value of i is less than 10, and increase the value of i by one each iteration. For arrays, we often do the following:|for(var i = 0; i < arr.length; i++) { console.log(arr[i]); }|This will go through the array and print each element of the array into the console",
    "url": "https://www.w3schools.com/js/js_loop_for.asp"
  }],
  "threads": [{
    "id": 1,
    "title": "Welcome!",
    "precursors": [],
    "messages": [{
      "authorId": 5,
      "text": "Hi there, welcome to the team! Hope you are settling in nicely to your new surroundings :) I heard you are new to JavaScript so i have tasked Nkondo with getting you up to speed, he will send you assignments and you will simply send them back to him, when you have completed his tasks you will hear from me again, see you soon!"
    }, {
      "authorId": 3,
      "delay": 4,
      "text": "Hi! I am sending you your first assignment now :)"
    }]
  },{
    "id": 2,
    "title": "Up to speed",
    "precursors": [],
    "messages": [{
      "authorId": 3,
      "delay": 10,
      "text": "I have been given the honourable task of getting you up to speed with our development here :)\nFirst of all, as you already have heard, the purpose of this company is to accept small jobs from bigger development teams to make small functions that they need but don't want to spend their resources developing. This can be anything from small math functions to large functions manipulating lists and such, you get the idea :)\nBecause you just arrived, and the fact that ive been told you are new to JavaScript, i am going to go easy on you to begin with. What i want you to do is as follows:\n|sum|\nSounds simple enough? Get cracking! Send me the function when you are done, and then i will forward you a more meaningful task :)"
    }, {
      "authorId": 4,
      "delay": 3,
      "text": "Why wasn't my first assignment this simple? :("
    }],
    "completedMessages": [{
      "authorId": 3,
      "delay": 2,
      "text": "Good job! I am sending you some new assignments now :)"
    }],
    "assignment": {
      "id": 1,
      "name": "Variables and functions",
      "function": "intro",
      "summary": "Modify the function to add an exclamation mark on the end of the supplied parameter.",
      "solution": "function intro(str) { var result = str+'!'; return result; }",
      "template": "function intro(str) {\n\tvar result = str /* Add exclamation mark here */;\n\treturn result;\n}",
      "readOnlyLines": [1, 1],
      "documentationIds": ["Variables", "Functions", "console.log"],
      "hint": "Variable result equals parameter plus exclamation mark, then return str",
      "arguments": [
        { "description": "String", "example": "Hello world", "type": "string" }
      ],
      "tests": [
        { "arguments": [ "A" ], "result": "A!" },
        { "arguments": [ "C" ], "result": "C!" },
        { "arguments": [ "E" ], "result": "E!" },
        { "arguments": [ "H" ], "result": "H!" },
        { "arguments": [ "O" ], "result": "O!" },
        { "arguments": [ " " ], "result": " !" },
        { "arguments": [ "0" ], "result": "0!" },
        { "arguments": [ "T" ], "result": "T!" },
        { "arguments": [ "V" ], "result": "V!" },
        { "arguments": [ "!" ], "result": "!!" }
      ]
    }
  },{
    "id": 3,
    "title": "1st assignment!",
    "precursors": [1],
    "messages": [{
      "authorId": 3,
      "delay": 3,
      "text": "Hi again! For one of our clients projects we need a simple function that does as follows:\n|sum|\nPretty simple! I will also supply some documentation on JavaScript data types for you to learn about :)"
    }, {
      "authorId": 2,
      "delay": 4,
      "text": "typeof Nkondo === Bossy!"
    }, {
      "authorId": 3,
      "delay": 4,
      "text": "typeof Sandra === Junior :D"
    }],
    "completedMessages": [{
      "authorId": 3,
      "delay": 2,
      "text": "Good job! Next i will send you an assignment about objects in JavaScript"
    }],
    "assignment": {
      "id": 2,
      "name": "String concatenation",
      "function": "concat",
      "summary": "Modify the function to return the two supplied strings concatenated together.",
      "solution": "function concat(str1, str2) { var result = str1 + str2; return result; }",
      "template": "function concat(str1, str2) {\n\tvar result = str1 /* Modify to concatenate here */;\n\treturn result;\n}",
      "readOnlyLines": [1, 1],
      "documentationIds": ["String operations", "Types"],
      "hint": "Variable result equals string one plus string two, then return result",
      "arguments": [
        { "description": "String", "example": "Hello", "type": "string" },
        { "description": "String", "example": "World", "type": "string" }
      ],
      "tests": [
        { "arguments": [ "A", "D" ], "result": "AD" },
        { "arguments": [ "C", "O" ], "result": "CO" },
        { "arguments": [ "U", "A" ], "result": "UA" },
        { "arguments": [ "H", "I" ], "result": "HI" },
        { "arguments": [ ":", ")" ], "result": ":)" },
        { "arguments": [ " ", " " ], "result": "  " },
        { "arguments": [ "0", "1" ], "result": "01" },
        { "arguments": [ "T", "i" ], "result": "Ti" },
        { "arguments": [ "_", "_" ], "result": "__" },
        { "arguments": [ "!", "?" ], "result": "!?" }
      ]
    }
  },{
    "id": 4,
    "title": "Add function",
    "precursors": [1],
    "messages": [{
      "authorId": 4,
      "delay":  10, 
      "text": "Hi! I'm Maja, i'm and intern here but im fairly good at maths so i was told to forward you some tasks related to that :) Here a client is making a game that requires a modified add function as follows: |sum|"
    }],
    "completedMessages": [{
      "authorId": 4,
      "delay": 2,
      "text": "Good job :) As the maths you use in code get more advanced, you'll need to use more advanced functionality such as built-in math functions, i'll forward you an assignment related to that next"
    }],
    "assignment": {
      "id": 3,
      "name": "Basic math",
      "function": "sumdiv",
      "summary": "Modify the function to add the two numbers together, then multiply the resulting number by 0.27.",
      "solution": "function sumdiv(num1, num2) { var result = num1 + num2; result = result * 0.27; return result; }",
      "template": "function sumdiv(num1, num2) {\n\tvar result = 0;\n\tresult = 0 * 0;\n\treturn result;\n}",
      "readOnlyLines": [1, 1],
      "documentationIds": ["Operators", "Order of operations"],
      "hint": "Variable result equals parameters num1 plus num2, then result equals result times 0.27, then return result",
      "arguments": [
        { "description": "Number", "example": "52" },
        { "description": "Number", "example": "24" }
      ],
      "tests": [
        { "arguments": [  5,  2 ], "result": 1.8900000000000001 },
        { "arguments": [ 94, 23 ], "result": 31.590000000000003 },
        { "arguments": [ 44, 12 ], "result": 15.120000000000001 },
        { "arguments": [ -3, 57 ], "result": 14.580000000000002 },
        { "arguments": [-85,-27 ], "result": -30.240000000000002 },
        { "arguments": [527, 273], "result": 216 },
        { "arguments": [  2, 282], "result": 76.68 },
        { "arguments": [  1,  1 ], "result": 0.54 },
        { "arguments": [972, 931], "result": 513.8100000000001 },
        { "arguments": [ 99, 98 ], "result": 53.190000000000005 }]
      }
  },{
    "id": 5,
    "title": "Email handle",
    "precursors": [2],
    "messages": [{
      "authorId": 3,
      "delay":  3, 
      "text": "Good work on the string assignment! This time i have a client that is a startup that wants us to make a function that generates an email address handle based on their name and title in the company. What i want you to do is as follows: |sum|. I will attach some information about objects and properties that will be useful for this"
    }],
    "completedMessages": [{
      "authorId": 3,
      "delay": 2,
      "text": "Great! Forwarding another assignment in a similar vein to this one"
    }],
    "assignment": {
      "id": 4,
      "name": "Objects and properties",
      "function": "objname",
      "summary": "Modify the function to return the concatenated string of the object properties \"name\" and \"title\"",
      "solution": "function objconcat(obj) { var name = obj.name; var title = obj.title; var result = name + title; return result; }",
      "template": "function objconcat(obj) {\n\tvar name = \"Paul\";\n\tvar title = \"CEO\";\n\tvar result = name;\n\treturn result;\n}",
      "readOnlyLines": [1, 1],
      "documentationIds": ["Objects", "Object properties"],
      "hint": "Variable name equals name property of obj, then variable title equals title property of obj, then variable result equals variable name plus variable title, then return result",
      "arguments": [
        { "description": "Object with properties \"name\" and \"title\"", "example": "{name: \"Paul\", title: \"CEO\"}" }
      ],
      "tests": [
        { "arguments": [ "{name: \"peter\", title: \"intern\"}"], "result": "peterintern" },
        { "arguments": [ "{name: \"paul\", title: \"ceo\"}"], "result": "paulceo" },
        { "arguments": [ "{name: \"kyle\", title: \"cashier\"}"], "result": "kylecashier" },
        { "arguments": [ "{name: \"lars\", title: \"drummer\"}"], "result": "larsdrummer" },
        { "arguments": [ "{name: \"sebastian\", title: \"driver\"}"], "result": "sebastiandriver" },
        { "arguments": [ "{name: \"linus\", title: \"developer\"}"], "result": "linusdeveloper" },
        { "arguments": [ "{name: \"obi\", title: \"jedi\"}"], "result": "obijedi" },
        { "arguments": [ "{name: \"elizabeth\", title: \"queen\"}"], "result": "elizabethqueen" },
        { "arguments": [ "{name: \"trump\", title: \"tweeter\"}"], "result": "trumptweeter" },
        { "arguments": [ "{name: \"john\", title: \"guitarist\"}"], "result": "johnguitarist" }]
      }
  },{
    "id": 6,
    "title": "Game math",
    "precursors": [3],
    "messages": [{
      "authorId": 4,
      "delay":  3, 
      "text": "In addition to math operators, JavaScript contains a math library with a collection of functions for you to use. We have a customer who is in the process of developing a game, and need a function that combines a couple of Math functions like this: |sum|."
    }],
    "completedMessages": [{
      "authorId": 4,
      "delay": 2,
      "text": "Great :) It looks a bit barren now but i will send you a new assignment as it comes in!"
    }],
    "assignment": {
      "id": 5,
      "name": "Math library",
      "function": "powsqrt",
      "summary": "Modify the function to raise the first parameter to the power of the second, then return the square root of the resulting number",
      "solution": "function powsqrt(num1, num2) { var pow = Math.pow(num1, num2); var result = Math.sqrt(pow); return result; }",
      "template": "function powsqrt(num1, num2) {\n\tvar pow = num1 + num2 /* Use Math.pow() */;\n\tvar result = pow /* Use Math.sqrt() */;\n\treturn result;\n}",
      "readOnlyLines": [1, 1],
      "documentationIds": ["Libraries", "Math library"],
      "hint": "Variable pow equals result of math function pow with arguments num1 and num2, then variable result equals result of math function sqrt with argument pow, then return result",
      "arguments": [
        { "description": "Number", "example": "2" },
        { "description": "Number", "example": "4" }
      ],
      "tests": [
        { "arguments": [  5,  2 ], "result": 5 },
        { "arguments": [  4,  3 ], "result": 8 },
        { "arguments": [  4, 12 ], "result": 4096 },
        { "arguments": [ 10,  1 ], "result": 3.1622776601683795 },
        { "arguments": [  5,  7 ], "result": 279.5084971874737 },
        { "arguments": [  4,  2 ], "result": 4 },
        { "arguments": [  2, 22 ], "result": 2048 },
        { "arguments": [  1,  1 ], "result": 1 },
        { "arguments": [ 10,  9 ], "result": 31622.776601683792 },
        { "arguments": [  9,  8 ], "result": 6561 }]
      }
  },{
    "id": 7,
    "title": "List functions",
    "precursors": [4, 5],
    "messages": [{
      "authorId": 2,
      "delay":  3, 
      "text": "Hi, we have a client want a series of list-functions, i will forward them to you as they come along, here is the first one: |sum|There are several different ways to tackle this one, but as long as it works they will be happy!"
    }],
    "completedMessages": [{
      "authorId": 2,
      "delay": 2,
      "text": "Fantastic, sending the next one"
    }],
    "assignment": {
      "id": 6,
      "name": "Array generator",
      "function": "arrval",
      "summary": "Modify the function return an array of provided size with each item having the provided value",
      "solution": "function arrval(size, value) { var arr = new Array(size); for(var i = 0; i < arr.length; i++) { arr[i] = value } return arr; }",
      "template": "function arrval(size, value) {\n\tvar arr = size /* Create new array object */;\n\t/* Loop through array and set each items value */\n\treturn arr;\n}",
      "readOnlyLines": [1, 1],
      "documentationIds": ["Arrays", "Loops"],
      "hint": "Variable arr equals new array using parameter size, then loop through arr and set each item to be parameter value, then return arr",
      "arguments": [
        { "description": "Number", "example": "2" },
        { "description": "Any", "example": "\"Paul\"" }
      ],
      "tests": [
        { "arguments": [  5, "\"Test\"" ], "result": "Test,Test,Test,Test,Test" },
        { "arguments": [  4, 4 ], "result": "4,4,4,4" },
        { "arguments": [  6, "\"Hello\"" ], "result": "Hello,Hello,Hello,Hello,Hello,Hello" },
        { "arguments": [ 10, true ], "result": "true,true,true,true,true,true,true,true,true,true" },
        { "arguments": [  2, "\"Value\"" ], "result": "Value,Value" },
        { "arguments": [ 12, 1 ], "result": "1,1,1,1,1,1,1,1,1,1,1,1" },
        { "arguments": [  3, -23 ], "result": "-23,-23,-23" },
        { "arguments": [  1, "\"Boom\"" ], "result": "Boom" },
        { "arguments": [  8, 2 ], "result": "2,2,2,2,2,2,2,2" },
        { "arguments": [  9, 1 ], "result": "1,1,1,1,1,1,1,1,1" }]
      }
  }]
}
